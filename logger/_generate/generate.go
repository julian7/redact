package main

import (
	"flag"
	"fmt"
	"os"
	"text/template"

	"log"
)

var (
	preamble = `package logger
// Generated by go generate, do not edit`
	functmpl = `
// {{.Name}} writes a log entry using fmt.Sprint
func (l *Logger) {{.Name}}(attrs ...interface{}) {
	l.Log({{.Name}}Level, attrs...)
}

// {{.Name}}f writes a log entry using fmt.Sprintf
func (l *Logger) {{.Name}}f(attrs ...interface{}) {
	l.Logf({{.Name}}Level, attrs...)
}
`
)

type data struct {
	Name string
}

func main() {
	var err error

	var fd *os.File

	outfile := flag.String("output", "", "output file (use '-' for stdout)")
	flag.Parse()

	if *outfile == "" {
		flag.Usage()
		os.Exit(1)
	}

	if *outfile == "-" {
		fd = os.Stdout
	} else {
		fd, err = os.Create(*outfile)
		if err != nil {
			log.Fatalf("cannot write to %s: %v", *outfile, err)
		}

		defer fd.Close()
	}

	fmt.Fprintln(fd, preamble)

	names := []string{
		"Debug",
		"Info",
		"Warn",
		"Error",
		"Fatal",
	}

	tmpl, err := template.New("func").Parse(functmpl)
	if err != nil {
		log.Fatalf("parsing template: %v", err)
	}

	for _, name := range names {
		d := data{Name: name}

		err := tmpl.Execute(fd, d)
		if err != nil {
			log.Fatalf("rendering template for %s: %v", name, err)
		}
	}
}
